/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenRecipientInterface extends utils.Interface {
  functions: {
    "receiveApproval(address,uint256,address,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "receiveApproval"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "receiveApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveApproval",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedEther(address,uint256)": EventFragment;
    "ReceivedTokens(address,uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
}

export interface ReceivedEtherEventObject {
  sender: string;
  amount: BigNumber;
}
export type ReceivedEtherEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEtherEventObject
>;

export type ReceivedEtherEventFilter = TypedEventFilter<ReceivedEtherEvent>;

export interface ReceivedTokensEventObject {
  from: string;
  value: BigNumber;
  token: string;
  extraData: string;
}
export type ReceivedTokensEvent = TypedEvent<
  [string, BigNumber, string, string],
  ReceivedTokensEventObject
>;

export type ReceivedTokensEventFilter = TypedEventFilter<ReceivedTokensEvent>;

export interface TokenRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenRecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    receiveApproval(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  receiveApproval(
    from: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    receiveApproval(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedEther(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): ReceivedEtherEventFilter;
    ReceivedEther(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): ReceivedEtherEventFilter;

    "ReceivedTokens(address,uint256,address,bytes)"(
      from?: PromiseOrValue<string> | null,
      value?: null,
      token?: PromiseOrValue<string> | null,
      extraData?: null
    ): ReceivedTokensEventFilter;
    ReceivedTokens(
      from?: PromiseOrValue<string> | null,
      value?: null,
      token?: PromiseOrValue<string> | null,
      extraData?: null
    ): ReceivedTokensEventFilter;
  };

  estimateGas: {
    receiveApproval(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveApproval(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
