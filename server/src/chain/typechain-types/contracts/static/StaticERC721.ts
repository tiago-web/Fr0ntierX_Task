/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StaticERC721Interface extends utils.Interface {
  functions: {
    "swapOneForOneERC721(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapOneForOneERC721Decoding(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "transferERC721Exact(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "swapOneForOneERC721"
      | "swapOneForOneERC721Decoding"
      | "transferERC721Exact"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swapOneForOneERC721",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOneForOneERC721Decoding",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721Exact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapOneForOneERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOneForOneERC721Decoding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721Exact",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StaticERC721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StaticERC721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  swapOneForOneERC721(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOneForOneERC721Decoding(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferERC721Exact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
