/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WyvernStaticInterface extends utils.Interface {
  functions: {
    "and(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "any(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anyAddOne(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anyNoFill(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "anySingle(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
    "atomicizer()": FunctionFragment;
    "dumbSequenceExact(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "or(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "sequenceAnyAfter(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
    "sequenceExact(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
    "split(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "splitAddOne(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapExact(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapForever(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapOneForOneERC1155(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapOneForOneERC1155Decoding(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapOneForOneERC721(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "swapOneForOneERC721Decoding(bytes,address[7],uint8[2],uint256[6],bytes,bytes)": FunctionFragment;
    "test()": FunctionFragment;
    "transferERC1155Exact(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
    "transferERC20Exact(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
    "transferERC721Exact(bytes,address[7],uint8,uint256[6],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "and"
      | "any"
      | "anyAddOne"
      | "anyNoFill"
      | "anySingle"
      | "atomicizer"
      | "dumbSequenceExact"
      | "name"
      | "or"
      | "sequenceAnyAfter"
      | "sequenceExact"
      | "split"
      | "splitAddOne"
      | "swapExact"
      | "swapForever"
      | "swapOneForOneERC1155"
      | "swapOneForOneERC1155Decoding"
      | "swapOneForOneERC721"
      | "swapOneForOneERC721Decoding"
      | "test"
      | "transferERC1155Exact"
      | "transferERC20Exact"
      | "transferERC721Exact"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "and",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "any",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyAddOne",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyNoFill",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySingle",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dumbSequenceExact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "or",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceAnyAfter",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceExact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitAddOne",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapForever",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOneForOneERC1155",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOneForOneERC1155Decoding",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOneForOneERC721",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOneForOneERC721Decoding",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferERC1155Exact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20Exact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721Exact",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "and", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "any", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anyAddOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anyNoFill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anySingle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "atomicizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dumbSequenceExact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "or", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequenceAnyAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequenceExact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitAddOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOneForOneERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOneForOneERC1155Decoding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOneForOneERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOneForOneERC721Decoding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferERC1155Exact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20Exact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721Exact",
    data: BytesLike
  ): Result;

  events: {};
}

export interface WyvernStatic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WyvernStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    and(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    any(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anyAddOne(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anyNoFill(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anySingle(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    atomicizer(overrides?: CallOverrides): Promise<[string]>;

    dumbSequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    or(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    sequenceAnyAfter(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    sequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    split(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    splitAddOne(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapForever(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOneForOneERC1155(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOneForOneERC1155Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    test(overrides?: CallOverrides): Promise<[void]>;

    transferERC1155Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    transferERC20Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  and(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  any(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>[],
    arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anyAddOne(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>[],
    arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anyNoFill(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>[],
    arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anySingle(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>[],
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  atomicizer(overrides?: CallOverrides): Promise<string>;

  dumbSequenceExact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    cdata: PromiseOrValue<BytesLike>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  or(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  sequenceAnyAfter(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    uints: PromiseOrValue<BigNumberish>[],
    cdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  sequenceExact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    uints: PromiseOrValue<BigNumberish>[],
    cdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  split(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  splitAddOne(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapExact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapForever(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOneForOneERC1155(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOneForOneERC1155Decoding(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOneForOneERC721(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOneForOneERC721Decoding(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    uints: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    counterdata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  test(overrides?: CallOverrides): Promise<void>;

  transferERC1155Exact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  transferERC20Exact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  transferERC721Exact(
    extra: PromiseOrValue<BytesLike>,
    addresses: PromiseOrValue<string>[],
    howToCall: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    and(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    any(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyAddOne(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyNoFill(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySingle(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    atomicizer(overrides?: CallOverrides): Promise<string>;

    dumbSequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    or(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sequenceAnyAfter(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    split(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitAddOne(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapForever(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC1155(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC1155Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<void>;

    transferERC1155Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferERC20Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    and(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    any(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyAddOne(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyNoFill(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySingle(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atomicizer(overrides?: CallOverrides): Promise<BigNumber>;

    dumbSequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    or(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequenceAnyAfter(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    split(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitAddOne(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapForever(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC1155(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC1155Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<BigNumber>;

    transferERC1155Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC20Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    and(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    any(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyAddOne(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyNoFill(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anySingle(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atomicizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dumbSequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    or(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sequenceAnyAfter(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sequenceExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      uints: PromiseOrValue<BigNumberish>[],
      cdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    split(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitAddOne(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapForever(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOneForOneERC1155(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOneForOneERC1155Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOneForOneERC721(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOneForOneERC721Decoding(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCalls: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      uints: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      counterdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferERC1155Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferERC20Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferERC721Exact(
      extra: PromiseOrValue<BytesLike>,
      addresses: PromiseOrValue<string>[],
      howToCall: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
